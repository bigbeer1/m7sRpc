// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package m7sClient

import (
	"github.com/bigbeer1/m7sRpc/internal/server"
	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// M7SClient is the client API for M7S service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type M7SClient interface {
}

type m7SClient struct {
	cc grpc.ClientConnInterface
}

func NewM7SClient(cc grpc.ClientConnInterface) M7SClient {
	return &m7SClient{cc}
}

// M7SServer is the server API for M7S service.
// All implementations must embed UnimplementedM7SServer
// for forward compatibility
type M7SServer interface {
	mustEmbedUnimplementedM7SServer()
}

// UnimplementedM7SServer must be embedded to have forward compatible implementations.
type UnimplementedM7SServer struct {
}

func (UnimplementedM7SServer) mustEmbedUnimplementedM7SServer() {}

// UnsafeM7SServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to M7SServer will
// result in compilation errors.
type UnsafeM7SServer interface {
	mustEmbedUnimplementedM7SServer()
}

func RegisterM7SServer(s grpc.ServiceRegistrar, srv *server.M7sServer) {
	s.RegisterService(&M7S_ServiceDesc, srv)
}

// M7S_ServiceDesc is the grpc.ServiceDesc for M7S service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var M7S_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "m7sClient.m7s",
	HandlerType: (*M7SServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "m7s.proto",
}
